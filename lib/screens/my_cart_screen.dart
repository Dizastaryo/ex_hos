import 'package:flutter/material.dart';
import 'package:dio/dio.dart';

class MyCartScreen extends StatefulWidget {
  const MyCartScreen({super.key});

  @override
  State<MyCartScreen> createState() => _MyCartScreenState();
}

class _MyCartScreenState extends State<MyCartScreen> {
  String _output = '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞';

  Future<void> _checkHeadersAndCookies() async {
    final dio = Dio();

    try {
      final response = await dio.get(
        'http://127.0.0.1:8000/products/', // –∑–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        options: Options(
          headers: {
            // –ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
            // 'Authorization': 'Bearer your_access_token',
          },
        ),
      );

      final buffer = StringBuffer();

      buffer.writeln('üîπ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:');
      dio.options.headers.forEach((key, value) {
        buffer.writeln('$key: $value');
      });

      buffer.writeln('\nüî∏ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
      response.headers.forEach((key, values) {
        buffer.writeln('$key: ${values.join('; ')}');
      });

      buffer.writeln('\nüç™ Set-Cookie –∏–∑ –æ—Ç–≤–µ—Ç–∞:');
      final cookies = response.headers.map['set-cookie'];
      if (cookies != null) {
        for (var cookie in cookies) {
          buffer.writeln(cookie);
        }
      } else {
        buffer.writeln('–ù–µ—Ç cookies –≤ –æ—Ç–≤–µ—Ç–µ.');
      }

      setState(() {
        _output = buffer.toString();
      });
    } catch (e) {
      setState(() {
        _output = '‚ùå –û—à–∏–±–∫–∞: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            ElevatedButton(
              onPressed: _checkHeadersAndCookies,
              child: const Text('–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  _output,
                  style: const TextStyle(fontSize: 14),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
